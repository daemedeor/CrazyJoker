extends ../layout

block content
  #table.clearfix.mdl-grid
    div#middle-of-table
      #deck.card(data-decktype="deck")

      #discard.card(data-decktype="discard")

    #me.clearfix.player-container
      .dealer
      .hand#me-hand(data-decktype="playerHand")
    
    #player-0.player-container
      .dealer
      .hand(data-decktype="playerHand")
        .card
        .card
        .card
        .card
        .card
        .card
        .card

    #player-1.player-container
      .dealer
      .hand(data-decktype="playerHand")
        .card
        .card
        .card
        .card
        .card
        .card
        .card

    #player-2.player-container
      .dealer
      .hand(data-decktype="playerHand")
        .card
        .card
        .card
        .card
        .card
        .card
        .card

  #overlay
    .wrapper
      a#start-button.button(href="#") Start Game

      #shareRoom
        label(for="url") Room URL
        div(data-room="#{share}", id="room") #{shareURL}
  
  #await
    .wrapper
      #fountainTextG
        #fountainTextG_1.fountainTextG L
        #fountainTextG_2.fountainTextG o
        #fountainTextG_3.fountainTextG a
        #fountainTextG_4.fountainTextG d
        #fountainTextG_5.fountainTextG i
        #fountainTextG_6.fountainTextG n
        #fountainTextG_7.fountainTextG g
        #fountainTextG_8.fountainTextG .
        #fountainTextG_9.fountainTextG .
        #fountainTextG_10.fountainTextG .

block headerStyles
  link(rel="stylesheet", href="/css/dragula.min.css")
  link(rel="stylesheet", href="/css/jquery.fancybox.css")

block headerScripts
  script(src="/js/dragula.min.js")
  script(src="/js/jquery.fancybox.js")

block footerScripts
  script(src='/socket.io/socket.io.js')
  script(src='/js/frontEndLogic.js')

  script.
    $(function(){

      var IO = {
        init: function(){
          IO.socket = io.connect();
          IO.bindEvents();
        },

        bindEvents: function(){
          IO.socket.on('connected', IO.connected);
          IO.socket.on('goToLobby', IO.kickout);
          IO.socket.on('handSetUp', App.handSetup);
          IO.socket.on('setPlayer', App.setPlayer);
          IO.socket.on('contractDecided', IO.contractDecided);
          IO.socket.on('playerLeft', App.playerLeft);
          IO.socket.on('startNewRoundLogic', App.startNewRoundLogic);
          IO.socket.on('startNewRound', App.startNewRound);
          IO.socket.on('warning', App.warning);
          IO.socket.on('undoMove', App.undoMove);
          IO.socket.on('addCardToDiscardPile', App.addCardToDiscardPile);
          IO.socket.on('showCard', App.showCard);
          IO.socket.on('validMove', App.validMove);
          IO.socket.on('changedPlayer', App.setPlayer);
        },
        
        kickout: kickout,
        connected: connected,
        contractDecided: contractDecided
      };

      var App = {
        
        //elements of the game
        draggableElements: ["#me .hand", "#deck", "#discard"],
        currentDeckObject: $("#deck"),
        discardPile: $("#discard"),
        table: $("#table"),
        myHand: $(".hand", "#me"),
        me: $("#me"),
        playerId: null,
        roomID: $("#room").data("room"),
        loading: $("#await"),
        overlay: $("#overlay"),
        startButton: $("#start-button"),
        fromHand: '',
        referencedElement: '',
        dragndrop: null,

        //functions registered to the app
        registerDragEvents: registerDragEvents,
        waiting: waiting,
        joinRoom: joinRoom,
        pullCard: pullCard,
        drag: drag,
        drop: drop,
        stopDragging: stopDragging,
        hideOverlays: hideOverlays,
        handSetup: handSetup,
        setPlayer: setPlayer,
        startNewRound: startNewRound,
        playerLeft: playerLeft,
        startNewRoundLogic: startNewRoundLogic,
        setCurrentPlayer: setCurrentPlayer,
        warning: warning,
        pullACard: pullCard,
        
        //app logic that governs a round
        addCardToTable: addCardToTable,
        undoMove: undoMove,
        validMove: validMove,
        showCard: showCard,
        addCardToDiscardPile: addCardToDiscardPile,

        //functions that should remain defined on the table
        init: function() {

          App.overlay.show();

          var stringOfElements = App.draggableElements.join(",")
              , htmlToPassToDraggable = $(stringOfElements).toArray()
              , dragndrop;
          
          dragndrop = App.dragndrop = dragula(htmlToPassToDraggable);
          App.registerDragEvents(dragndrop);
          App.joinRoom();

        }
      }

      IO.init();
  
      App.startButton.click(function(e){
        e.preventDefault();
        IO.socket.emit("startGame");
      });

      function validMove() {
        App.validMove = true;
        console.log("validated");
      }

      function addCardToTable(){
        App.currentDeckObject.empty();
        App.currentDeckObject.append("<div class='card'></div>");
      }

      function startNewRoundLogic(data){
        App.hideOverlays();
        App.addCardToTable();
        setCurrentPlayer(data.dealerId);
      }
     
      function startNewRound() {
        IO.socket.emit('newRound');
      }

      function contractDecided() {
        App.waiting();
        IO.socket.emit('updateContract');
      }

      function kickout() {
        window.location = "/lobby";
      }

      function connected() {
        App.init();
      }

      //App functions 
      function stopDragging() {
        App.dragndrop.end();
      }
      
      function warning(data){
        console.warn(data.message);
        
        if(data.stopDragging){
          App.stopDragging();
        }
      }
      function startNewRound(data){
        App.hideOverlays();
        $.get("/contracts", {}, function(html){
          $.fancybox(html, { closeBtn: false, modal: true});
        });
      }

      function drop(el, target, source) {
        var dropLocation = $(target).data("decktype");

        if(App.pulledFrom == "playerHand" && dropLocation == "deck"){
          App.dragndrop.cancel(true);
          return;            
        }else if(dropLocation == "discard" && dropLocation != App.pulledFrom && App.myHand.length >= 7){

          var cardToDiscard = $(el).data("card");
          var originalPlace = $(source).data("decktype");
          IO.socket.emit("discardCard", {pile: originalPlace, card: cardToDiscard});
          $(el).remove();

          return;            
        }else if(dropLocation == "playerHand" && App.validMove){
          IO.socket.emit("addToHand");
        }else if(dropLocation != "playerHand"){
          IO.socket.emit("placeBack");
        }

      }
      function addCardToDiscardPile(data){
        var text = data.discardedCard.split("_")[1];
        var newText = "<p>"+text+"</p>";
        App.discardPile.append("<div class'card "+data.discardedCard+"'>"+newText+"</div>")
      }

      function undoMove() {
        IO.socket.emit("placeBack");
      }

      function drag(el, source) {
        var dropLocation = $(source).data("decktype");
        App.pulledFrom = dropLocation;
        App.referencedElement = source;
        App.newCard = el;

        App.pullACard();
      }
      
      function showCard(data){ 
          var text = data.newCard[0].split("_")[1];
          $(App.newCard).addClass(data.newCard[0]);
          $(App.newCard).append("<p>"+text+"</p>");
      }

      function pullCard() {
        IO.socket.emit("pullACard", {pile: App.pulledFrom});
      }

      function joinRoom() {
        IO.socket.emit("join", {room: App.roomID});
      };
      
      function setCurrentPlayer(id){
        id = (id.dealerId) ? id.dealerId : id;
   
        $(".dealer").removeClass("active");
        $(".dealer","[data-id="+id+"]").addClass("active");
      }

      function waiting() {
        App.loading.show();
      }

      function hideOverlays() {
        App.loading.hide();
        App.overlay.hide();
      }

      function registerDragEvents(dragndrop) {
        dragndrop.on("drag", App.drag);
        dragndrop.on("drop", App.drop);
      }

      function handSetup(data){
        var text, newCard;
        App.myHand.empty();
        App.me.attr("data-id", data.id);

        data.hand.forEach(function(e,i,a){
          text = e.split("_")[1];
          newCard = "<div class='card "+ e +"'><p>"+text+"</p></div>"
          App.myHand.append(newCard);
        });

        setPlayer(data);
      }
      
      function playerLeft(data){
        var currentId;

        $(".player-container").each(function(e){
          if(data.playerId == $(this).data('id')){
            $(this).removeAttr("data-id");
            return;
          }
        });
      }
      function switchPlayer(data){

      }

      function setPlayer(data){
        var players = data.players
            , currentIds = []
            , currentIdOfPlayer
            , currentPlayer
            , id = null
            , currentPlayerContainer;

        $('.player-container').each(function(){
          currentIdOfPlayer = $(this).data('id');
          if(currentIdOfPlayer){
            currentIds.push(currentIdOfPlayer);
          }
        });
        console.log(players);

        players.forEach(function(e,i){
          var emptyPlayer = 0;
          while(emptyPlayer < 3){

            currentPlayer = $("#player-"+ emptyPlayer, "#table");
            id = currentPlayer.data("id");
            if(!id){
              if(currentIds.indexOf(e) == -1){
                currentPlayer.attr('data-id', e);
                break;
              }
            }

            emptyPlayer++;
          }
          
          
        });
      }
    });

  
