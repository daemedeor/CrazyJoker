extends ../layout

block content
  #table.clearfix.mdl-grid
    div#middle-of-table
      #deck.card(data-decktype="deck")

      #discard.card(data-decktype="discard")

    #me.clearfix
      .dealer
      .hand#me-hand(data-decktype="playerhand")
  
  #overlay
    .wrapper
      a#start-button.button(href="#") Start Game

      #shareRoom
        label(for="url") Url of the room (if you want to invite specific people)
        div(data-room="#{share}", id="room") #{shareURL}
  
  #await
    .wrapper
      #fountainTextG
        #fountainTextG_1.fountainTextG L
        #fountainTextG_2.fountainTextG o
        #fountainTextG_3.fountainTextG a
        #fountainTextG_4.fountainTextG d
        #fountainTextG_5.fountainTextG i
        #fountainTextG_6.fountainTextG n
        #fountainTextG_7.fountainTextG g
        #fountainTextG_8.fountainTextG .
        #fountainTextG_9.fountainTextG .
        #fountainTextG_10.fountainTextG .

block headerStyles
  link(rel="stylesheet", href="/css/dragula.min.css")
  link(rel="stylesheet", href="/css/jquery.fancybox.css")

block headerScripts
  script(src="/js/dragula.min.js")
  script(src="/js/jquery.fancybox.js")

block footerScripts
  script(src='/socket.io/socket.io.js')

  script.

    $(function(){

      var IO = {

        init: function(){
          IO.socket = io.connect();
          IO.bindEvents();
        },

        bindEvents: function(){
          IO.socket.on('connected', IO.connected);
          IO.socket.on('goToLobby', IO.kickout);
        },
  
        kickout: kickout,
        connected: connected

      };

      var App = {
        
        //elements of the game
        draggableElements: [".hand", "#deck", "#discard"],
        currentDeckObject: $("#deck"),
        myHand: $("#me"),
        roomID: $("#room").data("room"),
        loading: $("#await"),
        overlay: $("#overlay"),
        fromHand: '',
        referencedElement: '',

        //functions registered to the app
        registerDragAndDrop: registerDragEvents;
        waiting: waiting,
        ready: ready,
        joinRoom: joinRoom,
        pullCard: pullCard,
        drag: dragEvent,
        
        //functions that should remain defined
        init: function(){

          var stringOfElements = draggableElements.join(",")
              , htmlToPassToDraggable = $(stringOfElements).toArray()
              , dragndrop = dragula(htmlToPassToDraggable);

          App.registerDragAndDrop(dragndrop);
          App.overlay.show();
        }
        


        drop: function(el, target, source){
          var dropLocation = $(target).data("decktype");

          if(App.pulledFrom == "playerhand" && dropLocation == "deck"){
            dragndrop.cancel(true);
            return;            
          }else if(dropLocation == "discard" && dropLocation != App.pulledFrom){
            var cardToDiscard = $(el).data("card");
            IO.socket.emit("discardCard", {room: App.gameId, pile: dropLocation, card: cardToDiscard})
            return;            
          }else if(dropLocation == "playerhand" && App.validMove){
            App.referencedElement = el;
            IO.socket.emit("addToHand", {player: App.currentPlayer, room: App.gameId});
            return;            
          }else if(dropLocation != "playerhand"){
            IO.socket.emit("placeBack", {room: App.gameId, deckType: dropLocation});
            $(el).remove();  
          }
        },
      
        stopDragging: function(){
          dragndrop.end();
        }

      }

      $("#start-button").click(function(e){
        e.preventDefault();
        IO.startGame();
      });

      IO.init();

    });

    function drop(el, source) {
      var dropLocation = $(source).data("decktype");

      App.pulledFrom = dropLocation;
      App.referencedElement = source;
    };

    function pullCard(destination, playerID) {
      IO.socket.emit("pullACard", {room: App.gameId,  pile: dropLocation, playerId: App.currentPlayer});
    }

    function joinRoom() {
      IO.socket.emit("join", {room: App.roomID});
    };

    function waiting() {
      App.loading.show();
    }

    function hideOverlays() {
      App.loading.hide();
      App.overlay.hide();
    }

    function registerDragEvents(dragndrop) {
      dragndrop.on("cancel", App.drop);
      dragndrop.on("dragend", App.dragEnd);
      dragndrop.on("drag", App.drag);
      dragndrop.on("drop", App.drop);
    }

    function kickout() {
      window.location = "/lobby";
    }

    function connected() {
      App.init();
    }