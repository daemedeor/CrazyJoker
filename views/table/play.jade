extends ../layout

block content
  #table.clearfix.mdl-grid
    div#middle-of-table
      #deck.card(data-decktype="deck")

      #discard.card(data-decktype="discard")

    #me.clearfix
      .dealer
      .hand#me-hand(data-decktype="playerhand")
  
  #overlay
    .wrapper
      a#start-button.button(href="#") Start Game

      #shareRoom
        label(for="url") Room URL
        div(data-room="#{share}", id="room") #{shareURL}
  
  #await
    .wrapper
      #fountainTextG
        #fountainTextG_1.fountainTextG L
        #fountainTextG_2.fountainTextG o
        #fountainTextG_3.fountainTextG a
        #fountainTextG_4.fountainTextG d
        #fountainTextG_5.fountainTextG i
        #fountainTextG_6.fountainTextG n
        #fountainTextG_7.fountainTextG g
        #fountainTextG_8.fountainTextG .
        #fountainTextG_9.fountainTextG .
        #fountainTextG_10.fountainTextG .

block headerStyles
  link(rel="stylesheet", href="/css/dragula.min.css")
  link(rel="stylesheet", href="/css/jquery.fancybox.css")

block headerScripts
  script(src="/js/dragula.min.js")
  script(src="/js/jquery.fancybox.js")

block footerScripts

  script(src='/socket.io/socket.io.js')
  script(src='/js/frontEndLogic.js')

  script.
    $(function(){

      var IO = {
        init: function(){
          IO.socket = io.connect();
          IO.bindEvents();
        },

        bindEvents: function(){
          IO.socket.on('connected', IO.connected);
          IO.socket.on('goToLobby', IO.kickout);
          IO.socket.on('handSetUp', App.handSetup);
          IO.socket.on('setPlayer', App.setPlayer);
        },
        
        kickout: kickout,
        connected: connected,

      };

      var App = {
        
        //elements of the game
        draggableElements: [".hand", "#deck", "#discard"],
        currentDeckObject: $("#deck"),
        myHand: $(".hand", "#me"),
        me: $("#me"),
        playerId: null,
        roomID: $("#room").data("room"),
        loading: $("#await"),
        overlay: $("#overlay"),
        startButton: $("#start-button"),
        fromHand: '',
        referencedElement: '',
        dragndrop: null,

        //functions registered to the app
        registerDragEvents: registerDragEvents,
        waiting: waiting,
        joinRoom: joinRoom,
        pullCard: pullCard,
        drag: drag,
        drop: drop,
        stopDragging: stopDragging,
        startGame: startGame,
        //- newRound: newRound,
        handSetup: handSetup,
        setPlayer: setPlayer,

        //functions that should remain defined on the table
        init: function() {

          App.overlay.show();

          var stringOfElements = App.draggableElements.join(",")
              , htmlToPassToDraggable = $(stringOfElements).toArray()
              , dragndrop;
          
          dragndrop = App.dragndrop = dragula(htmlToPassToDraggable);
          App.registerDragEvents(dragndrop);
          App.joinRoom();

        }
      }

      IO.init();

      App.startButton.click(function(e){
        e.preventDefault();
        App.startGame();
      });

      function kickout() {
        window.location = "/lobby";
      }

      function connected() {
        App.init();
      }

      //App functions 
      function stopDragging() {
        dragndrop.end();
      }

      function startGame(){
        IO.socket.emit("startGame");
      }

      function drop(el, target, source) {
        var dropLocation = $(target).data("decktype");

        if(App.pulledFrom == "playerhand" && dropLocation == "deck"){
          dragndrop.cancel(true);
          return;            
        }else if(dropLocation == "discard" && dropLocation != App.pulledFrom){
          var cardToDiscard = $(el).data("card");
          IO.socket.emit("discardCard", {room: App.gameId, pile: dropLocation, card: cardToDiscard})
          return;            
        }else if(dropLocation == "playerhand" && App.validMove){
          App.referencedElement = el;
          IO.socket.emit("addToHand", {player: App.currentPlayer, room: App.gameId});
          return;            
        }else if(dropLocation != "playerhand"){
          IO.socket.emit("placeBack", {room: App.gameId, deckType: dropLocation});
          $(el).remove();  
        }
      }

      function drag(el, source) {
        var dropLocation = $(source).data("decktype");

        App.pulledFrom = dropLocation;
        App.referencedElement = source;
        
        pullCard(dropLocation);
      }

      function pullCard(destination) {
        IO.socket.emit("pullACard", {room: App.gameId,  pile: dropLocation, playerId: App.currentPlayer});
      }

      function joinRoom() {
        IO.socket.emit("join", {room: App.roomID});
      };

      function waiting() {
        App.loading.show();
      }

      function hideOverlays() {
        App.loading.hide();
        App.overlay.hide();
      }

      function registerDragEvents(dragndrop) {
        dragndrop.on("cancel", App.drop);
        dragndrop.on("dragend", App.dragEnd);
        dragndrop.on("drag", App.drag);
        dragndrop.on("drop", App.drop);
      }

      function handSetup(data){
        
        App.myHand.empty();
        App.me.attr("data-id", data.id);

        data.hand.forEach(function(e,i,a){
          var text = e.split("_")[1];
          var newCard = "<div class='card "+ e +"'><p>"+text+"</p></div>"
          App.myHand.append(newCard);
        });

      }

      function setPlayer(data){
        var players = data.players;

        players.forEach(function(e,i){
          console.log(e);
        });
      }
    });

  
